# Tasks for the installation of OpenSearch (see https://github.com/opensearch-project/helm-charts/tree/main/charts/opensearch)
---
- name: Taint nodes for OpenSearch
  kubernetes.core.k8s_taint:
    name: "{{ item }}"
    taints:
      - key: "opensearch"
        value: "true"
        effect: "NoSchedule"
        state: "present"
  loop: "{{ opensearch_nodes }}"
  when: opensearch_enable_node_tolerations

- name: Create the namespace for OpenSearch
  kubernetes.core.k8s:
    name: "{{ k3s_opensearch_namespace }}"
    api_version: v1
    kind: Namespace
    state: present

- name: Set OpenSearch Password Hashes
  ansible.builtin.set_fact:
    opensearch_admin_passwd_hash: "{{ opensearch_admin_passwd | password_hash('bcrypt') }}"
    opensearch_kibana_server_passwd_hash: "{{ opensearch_kibana_server_passwd | password_hash('bcrypt') }}"
    opensearch_snapshot_restore_passd_hash: "{{ opensearch_snapshot_restore_passwd | password_hash('bcrypt') }}"
    opensearch_logger_passwd_hash: "{{ opensearch_logger_passwd | password_hash('bcrypt') }}"
    opensearch_monitoring_passwd_hash: "{{ opensearch_monitoring_passwd | password_hash('bcrypt') }}"
    opensearch_dashboards_user_passwd_hash: "{{ opensearch_dashboards_user_passwd | password_hash('bcrypt') }}"

- name: Create credentials secret for the OpenSearch Monitoring user
  kubernetes.core.k8s:
    state: present
    namespace: "{{ k3s_opensearch_namespace }}"
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: opensearch-monitoring-creds
      type: Opaque
      stringData:
        username: "{{ opensearch_monitoring_user }}"
        password: "{{ opensearch_monitoring_passwd }}"

- name: Configure Security Config Secret, Admin Client Certificate, Transport Layer and REST API Ingress for OpenSearch
  kubernetes.core.k8s:
    definition: "{{ lookup('template', 'templates/' + item ) }}"
    state: present
  with_items:
    - opensearch-security-config-secret.yml.j2
    - opensearch-transport-cert.yml.j2
    - opensearch-admin-cert.yml.j2
    - opensearch-rest-api.yml.j2

- name: Wait for OpenSearch Admin TLS secret to be created
  kubernetes.core.k8s_info:
    kind: Secret
    namespace: "{{ k3s_opensearch_namespace }}"
    name: opensearch-admin-secret
    wait: true
    wait_timeout: 120
    wait_sleep: 5

- name: Add OpenSearch chart repo.
  kubernetes.core.helm_repository:
    name: opensearch
    repo_url: "https://opensearch-project.github.io/helm-charts"

- name: Deploy OpenSearch Helm chart
  kubernetes.core.helm:
    name: "{{ opensearch_cluster_name }}"
    chart_ref: opensearch/opensearch
    chart_version: "{{ opensearch_chart_version }}"
    release_namespace: "{{ k3s_opensearch_namespace }}"
    update_repo_cache: true
    state: present
    values: "{{ lookup('template', 'templates/opensearch-helm-values.yml.j2') | from_yaml }}"
    wait: yes

- name: Wait for Pods to be ready
  kubernetes.core.k8s_info:
    kind: Pod
    namespace: "{{ k3s_opensearch_namespace }}"
    wait: yes
    wait_sleep: 10
    wait_timeout: 600
    wait_condition:
      type: Ready
      status: "True"

- name: Wait for OpenSearch Cluster to be healthy (this may take a while)
  uri:
    url: "https://{{ opensearch_rest_api }}/_cluster/health"
    method: GET
    user: "admin"
    password: "{{ opensearch_admin_passwd }}"
    force_basic_auth: yes
    validate_certs: yes
    status_code: 200
  register: cluster_status
  retries: 10
  delay: 15
  until: cluster_status.status == 200 and ('status' in cluster_status.json and cluster_status.json.status in ['green', 'yellow'])
  ignore_errors: yes # We handle the failure gracefully below

- name: Print response if health check fails
  fail:
    msg: "Cluster failed health check with status: {{ cluster_status }}"
  when: cluster_status is failed

- name: Create PrometheusRule for OpenSearch metrics
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: monitoring.coreos.com/v1
      kind: PrometheusRule
      metadata:
        name: opensearch-rules
        namespace: "{{ k3s_monitoring_namespace }}"
        labels:
          release: kube-prometheus-stack
      spec:
        groups:
          - name: opensearch.rules
            rules:
              - alert: OpenSearchNodeDown
                expr: up{job="opensearch"} == 0
                for: 1m
                labels:
                  severity: critical
                annotations:
                  summary: OpenSearch node is down
                  description: No response from OpenSearch metrics endpoint
              - alert: OpenSearchHighHeapUsage
                expr: opensearch_jvm_memory_used_bytes{area="heap"} / opensearch_jvm_memory_committed_bytes{area="heap"} > 0.9
                for: 2m
                labels:
                  severity: warning
                annotations:
                  summary: JVM heap usage is over 90%
                  description: OpenSearch instance is using a high percentage of its heap
  when: opensearch_enable_monitoring and k3s_monitoring_namespace is defined



