# Tasks for installing Longhorn - a lightweight distributed block storage system for Kubernetes - onto a host in the cluster.
#
# Assumes the `longhorn/cluster-prep` role was previously run.
---
# Install prerequisite software and modules
- name: Install prerequisites
  include_tasks: install_prereqs.yml

# Note that these tasks will WIPE THE DISK!
# Be extra careful before executing these tasks and make sure that you have set the variables properly.
- name: Prepare the disk
  include_tasks: prepare_disk.yml
  when:
    - longhorn_prepare_disk | bool
    - (ansible_mounts | selectattr('mount', 'eq', longhorn_storage_path) | selectattr('fstype', 'eq', 'ext4') | list | length <= 0)
    - (ansible_mounts | selectattr('mount', 'eq', longhorn_storage_path) | selectattr('fstype', 'eq', 'xfs')  | list | length <= 0)

- name: Ensure storage path exists
  ansible.builtin.file:
    path: "{{ longhorn_storage_path }}"
    state: directory
    mode: '0777'
  when: not longhorn_prepare_disk | bool

- name: Create namespace for Longhorn namespace.
  kubernetes.core.k8s:
    name: "{{ k3s_longhorn_namespace }}"
    api_version: v1
    kind: Namespace
    state: present

- name: Add Longhorn Helm chart repository.
  kubernetes.core.helm_repository:
    name: longhorn
    repo_url: "https://charts.longhorn.io"

- name: Deploy LongHorn Helm chart.
  kubernetes.core.helm:
    name: longhorn
    chart_ref: longhorn/longhorn
    update_repo_cache: true
    release_namespace: "{{ k3s_longhorn_namespace }}"
    state: present
    values: "{{ lookup('template', 'templates/longhorn-helm-values.yml.j2') | from_yaml }}"

- name: Wait for Pods to be ready
  kubernetes.core.k8s_info:
    kind: Pod
    namespace: "{{ k3s_longhorn_namespace }}"
    wait: yes
    wait_sleep: 10
    wait_timeout: 360
    wait_condition:
      type: Ready
      status: "True"

- name: Create an Ingress rule for Longhorn UI
  kubernetes.core.k8s:
    definition: "{{ lookup('template', 'templates/longhorn-ui-ingress.yml.j2') | from_yaml }}"
    state: present

- name: Configure the Service Mesh for use with Longhorn
  include_tasks: configure_service_mesh.yml
  when: k3s_enable_service_mesh

# Prefer `longhorn` as the default storage class.
- name: Set the `local-path` storage class as non-default.
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: StorageClass
      metadata:
        name: local-path
        annotations:
          storageclass.kubernetes.io/is-default-class: "false"
    state: patched


