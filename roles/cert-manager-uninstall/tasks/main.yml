# Uninstalls the cert-manager package.
#
# https://cert-manager.io/docs/installation/helm/#uninstalling

# First delete all Issuers, ClusterIssuers, Certificates, CertificateRequests, Orders and Challenges
- name: Get a list of all Cluster Issuers
  kubernetes.core.k8s_info:
    api_version: "cert-manager.io/v1"
    kind: ClusterIssuer
  register: cluster_issuers

- name: Delete Cluster Issuers
  kubernetes.core.k8s:
    api_version: "cert-manager.io/v1"
    kind: ClusterIssuer
    state: absent
    name: "{{ item }}"
  loop: "{{ cluster_issuers | json_query('resources[*].metadata.name') }}"

- name: Get a list of all Issuers
  kubernetes.core.k8s_info:
    api_version: "cert-manager.io/v1"
    kind: Issuer
  register: issuers

- name: Delete Issuers
  kubernetes.core.k8s:
    api_version: "cert-manager.io/v1"
    kind: Issuer
    state: absent
    name: "{{ item }}"
  loop: "{{ issuers | json_query('resources[*].metadata.name') }}"

- name: Get a list of all Certificates
  kubernetes.core.k8s_info:
    api_version: "cert-manager.io/v1"
    kind: Certificate
  register: certificates

- name: Delete Certificates
  kubernetes.core.k8s:
    api_version: "cert-manager.io/v1"
    kind: Certificate
    state: absent
    name: "{{ item }}"
  loop: "{{ certificates | json_query('resources[*].metadata.name') }}"

- name: Get a list of all CertificateRequests
  kubernetes.core.k8s_info:
    api_version: "cert-manager.io/v1"
    kind: CertificateRequest
  register: certificate_requests

- name: Delete CertificateRequests
  kubernetes.core.k8s:
    api_version: "cert-manager.io/v1"
    kind: CertificateRequest
    state: absent
    name: "{{ item }}"
  loop: "{{ certificate_requests | json_query('resources[*].metadata.name') }}"

- name: Get a list of all Orders
  kubernetes.core.k8s_info:
    api_version: "cert-manager.io/v1"
    kind: Order
  register: orders

- name: Delete Orders
  kubernetes.core.k8s:
    api_version: "cert-manager.io/v1"
    kind: Order
    state: absent
    name: "{{ item }}"
  loop: "{{ orders | json_query('resources[*].metadata.name') }}"

- name: Get a list of all Challenges
  kubernetes.core.k8s_info:
    api_version: "cert-manager.io/v1"
    kind: Challenge
  register: challenges

- name: Delete Challenges
  kubernetes.core.k8s:
    api_version: "cert-manager.io/v1"
    kind: Challenge
    state: absent
    name: "{{ item }}"
  loop: "{{ challenges | json_query('resources[*].metadata.name') }}"

- name: Get a list of all Secrets
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Secret
    namespace: "{{ k3s_cert_manager_namespace }}"
  register: secrets

- name: Delete Secrets
  kubernetes.core.k8s:
    api_version: v1
    kind: Secret
    namespace: "{{ k3s_cert_manager_namespace }}"
    state: absent
    name: "{{ item }}"
  loop: "{{ secrets | json_query('resources[*].metadata.name') }}"

- name: Uninstall cert-manager with Helm
  kubernetes.core.helm:
    name: cert-manager
    namespace: "{{ k3s_cert_manager_namespace }}"
    state: absent
    wait: true

- name: Remove the cert-manager namespace
  kubernetes.core.k8s:
    api_version: v1
    name: "{{ k3s_cert_manager_namespace }}"
    kind: Namespace
    state: absent

- name: Remove cron job for Route53 DDNS updates
  cron:
    name: "Update Route 53 DDNS"
    state: absent

- name: Remove Route53 DDNS cron job script file
  ansible.builtin.file:
    path: /usr/local/bin/update_route53_ddns.sh
    state: absent

- name: Detach **all** managed policies from user
  amazon.aws.iam_user:
    access_key: "{{ aws_access_key_id }}"
    secret_key: "{{ aws_secret_access_key }}"
    name: "{{ aws_iam_user }}"
    managed_policies: []
    state: present

- name: Delete Route53 DDNS managed policy
  amazon.aws.iam_managed_policy:
    access_key: "{{ aws_access_key_id }}"
    secret_key: "{{ aws_secret_access_key }}"
    policy_name: route53-ddns-policy
    state: absent

- name: Remove AWS credentials from environment
  lineinfile:
    path: /etc/environment
    state: absent
    regexp: "{{ item }}"
  with_items:
    - "^AWS_ACCESS_KEY_ID=.*$"
    - "^AWS_SECRET_ACCESS_KEY=.*$"




