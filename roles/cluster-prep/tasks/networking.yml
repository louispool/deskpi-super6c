# Defines various tasks to configure networking in the DeskPi
#
# Refers to the hosts variables in '../inventory/hosts.yml and group variables in '../inventory/group_vars/'
---
# Configure a Static IP
#
# For example: "ip=192.168.2.200::192.168.2.1:255.255.255.0:deskpi1:eth0:off"
- name: Configure Static Networking in `cmdline.txt`
  import_tasks: cmdline.yml
  vars:
    key: ip
    value: '{{ ip_subnet_prefix|string + "." + ip_octet|string + "::" + gateway|string + ":" +
               ip_subnet_mask|string + ":" + inventory_hostname|string + ":eth0:off" }}'
    update: true
  notify:
    - Reboot host

# Note the use of '/etc/network/interfaces' has been deprecated in favour of '/etc/dhcpcd.conf' on Raspberry Pi OS
- name: Configure a static IP address (with dhcpcd)
  ansible.builtin.blockinfile:
    path: /etc/dhcpcd.conf
    marker: "# {mark} ANSIBLE MANAGED BLOCK - Static IP Config"
    block: |
      interface eth0
      static ip_address={{ ip_subnet_prefix }}.{{ ip_octet }}/24
      static routers={{ gateway }}
      static domain_name_servers={{ dns_server }}
  when: not ubuntu_os|bool
  notify:
    - Reboot host

# Ubuntu uses NetPlan for Network Management
- name: Disable Cloud Init
  ansible.builtin.copy:
    content: 'network: {config: disabled}'
    dest: /etc/cloud/cloud.cfg.d/99-disable-network-config.cfg
    force: yes
  when: ubuntu_os|bool
  notify:
    - Reboot host

- name: Remove Cloud Init file
  ansible.builtin.file:
    path: /etc/netplan/50-cloud-init.yaml
    state: absent

- name: Configure a static IP address (with Netplan)
  ansible.builtin.copy:
    content: |
      network:
        version: 2
        renderer: networkd
        ethernets:
          eth0:
            dhcp4: false
            dhcp6: false
            addresses:
              - {{ ip_subnet_prefix }}.{{ ip_octet }}/24
            routes:
             - to: default
               via: {{ gateway }}
            nameservers:
                addresses:
                - {{ dns_server }}
    dest: /etc/netplan/01-netcfg.yaml
    force: yes
  when: ubuntu_os|bool
  notify:
    - Apply netplan

# To allow changes to `etc/hosts` to persist on Ubuntu Server we need to adapt the Cloud Config
- name: Configure Cloud Config (comment conflicting lines)
  ansible.builtin.lineinfile:
    path: /etc/cloud/cloud.cfg
    regexp: "(^{{ item }}.*)"
    line: '# \1'
    backrefs: yes
  with_items:
    - "manage_etc_hosts:"
    - "preserve_hostname:"
    - "fqdn:"
    - "hostname:"
    - "prefer_fqdn_over_hostname:"
  when: ubuntu_os|bool

- name: Configure Cloud Config (allow setting of host names)
  ansible.builtin.blockinfile:
    path: /etc/cloud/cloud.cfg
    marker: "# {mark} ANSIBLE MANAGED BLOCK - Hostname Configuration"
    block: |
      # Do not update or manage /etc/hosts. User changes will not be overwritten.
      manage_etc_hosts: false

      # Prevent cloud-init from updating `/etc/hostname`
      preserve_hostname: true

      # Set hostname
      fqdn: {{ inventory_hostname }}.{{ cluster_local_domain }}
      hostname: {{ inventory_hostname }}
      prefer_fqdn_over_hostname: false
  when: ubuntu_os|bool
  notify:
    - Reboot host

- name: Configure `/etc/cloud/templates/hosts.debian.tmpl` on Ubuntu so DeskPis can see each other by hostname.
  ansible.builtin.lineinfile:
    dest: /etc/cloud/templates/hosts.debian.tmpl
    regexp: '{{ "^" + ip_subnet_prefix|string + "." + hostvars[item].ip_octet|string }}'
    line: "{{ ip_subnet_prefix|string + '.' + hostvars[item].ip_octet|string + '\t' + hostvars[item].inventory_hostname }}"
    state: present
  loop: "{{ groups['cluster'] }}"
  when: ubuntu_os|bool and inventory_hostname != hostvars[item].inventory_hostname

- name: Configure `/etc/hosts` file so DeskPis can see each other by hostname.
  ansible.builtin.lineinfile:
    dest: /etc/hosts
    regexp: '{{ "^" + ip_subnet_prefix|string + "." + hostvars[item].ip_octet|string }}'
    line: "{{ ip_subnet_prefix|string + '.' + hostvars[item].ip_octet|string + '\t' + hostvars[item].inventory_hostname }}"
    state: present
  loop: "{{ groups['cluster'] }}"
  when: inventory_hostname != hostvars[item].inventory_hostname

- name: Set the DNS Server on the `systemd-resolved` service.
  ansible.builtin.lineinfile:
    dest: /etc/systemd/resolved.conf
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: present
    mode: 0644
    backup: true
  with_items:
    - regexp: "^DNS="
      line: "DNS={{ dns_server }}"
    - regexp: "^Domains"
      line: "Domains={{ cluster_local_domain }}"
  notify: Restart systemd-resolved